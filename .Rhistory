```{r Exercise 3., eval = FALSE}
## create two objects, and add them together in a third
numberOne <- 5
numberTwo <- 2
addedNumbers <- numberOne + numberTwo
## list the contents of the workspace, then remove an object
rm(my_new_obj)
## copy an object
copiedObject <- myObj
## testing R's 'round' function with some examples
round(3.65)
round(0.3)
?round
## these calls to the 'round' function are all the same
round(3.65, digits = 1)
round(3.65, 1)
round(digits = 1, x = 3.65)
## Exercise 6 ##
## 3.7 ##
## predict the outcome of this call to 'round()'
round(3.65, "1")
## predict the outcome of this call to 'round()'
round(3.65, 1)
?round()
## demonstrating round() versus trunc()
round(3.65)
trunc(3.65)
## calling functions with additional arguments
round(3.45, "apple")
trunc(3.45, "apple", "hat")
round(3.65)
trunc(3.65)
round(3.45, "apple")
trunc(3.45, "apple", "hat")
paste("This is a", "string", "pasted together", "from", 6, "parts.")
?log
log(8, base = 2)
?rnorm
rnorm(n = 100, mean = 0, sd = 3)
?substr()
substr('credit', 1:3)
substr('credit', 1, 3)
substr('credit', 2, 3)
substr('credit', 2, 4)
## add a comment that explains difference between these two calls
as.character(round(3.67), digits = 1)
as.character(round(3.67, digits = 1))
## The first function rounds the number 3.67 up to 4 already, without using the argument digits. Whereas the other fucnction does use the digits argument. Both then turn the value into a 'string'.
## use functions to prettify printed output
bird_name <- "raven"
bird_weight <- 2
weight_unit <- "kg"
bird_span <- 1.3
span_unit <- "m"
paste(bird_name, ". Weight:", bird_weight, weight_unit, ". Wingspan:",
bird_span, span_unit, ".")
substr(bird_name, 1:1)
substr(bird_name, 1, 1)
toupper(substr(bird_name, 1, 1))
bird_name
paste( toupper(substr(bird_name, 1, 1)), substr(bird_name, 2, 5) ". Weight:", bird_weight, weight_unit, ". Wingspan:",
bird_span, span_unit, ".")
paste( toupper(substr(bird_name, 1, 1)), substr(bird_name, 2, 5), ". Weight:", bird_weight, weight_unit, ". Wingspan:",
bird_span, span_unit, ".")
paste( toupper(substr(bird_name, 1, 1)), substr(bird_name, 1, 5), ". Weight:", bird_weight, weight_unit, ". Wingspan:",
bird_span, span_unit, ".")
paste( toupper(substr(bird_name, 1, 1)) substr(bird_name, 2, 5), ". Weight:", bird_weight, weight_unit, ". Wingspan:",
bird_span, span_unit, ".")
paste( toupper(substr(bird_name, 1, 1)), substr(bird_name, 2, 5), ". Weight:", bird_weight, weight_unit, ". Wingspan:",
bird_span, span_unit, ".")
?paste
paste( toupper(substr(bird_name, 1, 1)), substr(bird_name, 2, 5), ". Weight:", bird_weight, weight_unit, ". Wingspan:",
bird_span, span_unit, ".", collapse = NULL)
paste( substr(bird_name, 1, 1)) ". Weight:", bird_weight, weight_unit, ". Wingspan:",
bird_span, span_unit, ".", collapse = NULL)
paste( substr(bird_name, 1, 1)) ",. Weight:", bird_weight, weight_unit, ". Wingspan:",
bird_span, span_unit, ".", collapse = NULL)
paste(substr(bird_name, 1, 1)), ". Weight:", bird_weight, weight_unit, ". Wingspan:",
bird_span, span_unit, ".", collapse = NULL)
paste( toupper(substr(bird_name, 1, 1)), ". Weight:", bird_weight, weight_unit, ". Wingspan:",
bird_span, span_unit, ".", collapse = NULL)
paste( substr(bird_name, 1, 1), ". Weight:", bird_weight, weight_unit, ". Wingspan:",
bird_span, span_unit, ".", collapse = NULL)
paste( substr(toUpper(bird_name, 1, 1), 5), ". Weight:", bird_weight, weight_unit, ". Wingspan:",
bird_span, span_unit, ".", collapse = NULL)
paste( toupper(substr(bird_name, 1, 1)), substr(bird_name, 2, 5), ". Weight:", bird_weight, weight_unit, ". Wingspan:",
bird_span, span_unit, ".", collapse = NULL)
paste( toupper(substr(bird_name, 1, 1)) + substr(bird_name, 2, 5), ". Weight:", bird_weight, weight_unit, ". Wingspan:",
bird_span, span_unit, ".", collapse = NULL)
paste( toupper(substr(bird_name, 1, 1)), substr(bird_name, 2, 5), ". Weight:", bird_weight, weight_unit, ". Wingspan:",
bird_span, span_unit, ".", collapse = NULL)
paste( toupper(substr(bird_name, 1, 1)),substr(bird_name, 2, 5), ". Weight:", bird_weight, weight_unit, ". Wingspan:",
bird_span, span_unit, ".", collapse = NULL)
paste( toupper(substr(bird_name, 1, 1)),substr(bird_name, 2, 5), ". Weight:", bird_weight, weight_unit, ". Wingspan:",
bird_span, span_unit, ".", collapse = ', ')
paste( toupper(substr(bird_name, 1, 1)),substr(bird_name, 2, 5), ". Weight:", bird_weight, weight_unit, ". Wingspan:",
bird_span, span_unit, ".", collapse = '; ')
paste( toupper(substr(bird_name, 1, 1)),substr(bird_name, 2, 5), ". Weight:", bird_weight, weight_unit, ". Wingspan:",
bird_span, span_unit, ".", collapse = NULL )
?substr
substr(bird_name,1:5,1:5)
substr(bird_name,1:5,1:1)
substr(bird_name,1,1)
substr(bird_name,1,3)
substr(bird_name,1:5,5:5)
substr(bird_name,toUpper(1:5),5:5)
substr(bird_name,1:5,5:5)
substr(bird_name,1:5,1:5)
substr(toUpper(bird_name,1:5),5:5)
toUpper(substr(bird_name,1:5),5:5)
toUpper(substr(bird_name,1:5, 5:5 ) 5:5)
paste( toupper(substr(bird_name, 1, 1)),substr(bird_name, 2, 5), ". Weight:", bird_weight, weight_unit, ". Wingspan:",
bird_span, span_unit, ".", collapse = NULL)
paste( toupper(substr(bird_name, 1, 1)) substr(bird_name, 2, 5), ". Weight:", bird_weight, weight_unit, ". Wingspan:",
bird_span, span_unit, ".", collapse = NULL)
paste( toupper(substr(bird_name, 1, 1)) (bird_name, 2, 5), ". Weight:", bird_weight, weight_unit, ". Wingspan:",
bird_span, span_unit, ".", collapse = NULL)
paste( toupper(substr(bird_name, 1, 1) bird_name, 2, 5) ), ". Weight:", bird_weight, weight_unit, ". Wingspan:",
bird_span, span_unit, ".", collapse = NULL)
paste( toupper(substr(bird_name, 1, 1)),substr(bird_name, 2, 5), ". Weight:", bird_weight, weight_unit, ". Wingspan:",
bird_span, span_unit, ".", collapse = NULL)
newBirdName <- ( toupper(substr(bird_name, 1, 1) bird_name, 2, 5) )
paste( toupper(substr(bird_name, 1, 1)),substr(bird_name, 2, 5), ". Weight:", bird_weight, weight_unit, ". Wingspan:",
bird_span, span_unit, ".", collapse = NULL)
newBirdName <- toupper(substr(bird_name, 1, 1)),substr(bird_name, 2, 5)
paste( chapitalize(bird_name), ". Weight:", bird_weight, weight_unit, ". Wingspan:",
bird_span, span_unit, ".", collapse = NULL)
paste( capitalize(bird_name), ". Weight:", bird_weight, weight_unit, ". Wingspan:",
bird_span, span_unit, ".", collapse = NULL)
library(hmisc)
library(Hmisc)
?toupper
.simpleCap <- function(x) {
s <- strsplit(x, " ")[[1]]
paste(toupper(substring(s, 1, 1)), substring(s, 2),
sep = "", collapse = " ")
}
paste( .simpleCap(bird_name) ". Weight:", bird_weight, weight_unit, ". Wingspan:",
bird_span, span_unit, ".", collapse = NULL)
paste( .simpleCap(bird_name) ",. Weight:", bird_weight, weight_unit, ". Wingspan:",
bird_span, span_unit, ".", collapse = NULL)
paste( .simpleCap(bird_name) ,". Weight:", bird_weight, weight_unit, ". Wingspan:",
bird_span, span_unit, ".", collapse = NULL)
## testing R's vector-building function, c()
my_char_vec <- c("apple", "orange", "banana")
my_char_vec
my_num_vec <- c(1, 6, 11.3)
my_num_vec
my_logic_vec <- c(FALSE, TRUE, FALSE)
my_logic_vec
## demonstrating R's automatic conversions
mix_vec_1 <- c("apple", 1.6, TRUE)
mix_vec_1
## building a vector from numbers and booleans
mix_vec_2 <- c(5, 4.9, FALSE)
mix_vec_2
## add mix_vec_1 and mix_vec_2 together
mix_vec_1 <- c("apple", 1.6, TRUE)
mix_vec_2 <- c(5, 4.9, FALSE)
## why is this vector different?
all_at_once_vec <- c("apple", 1.6, TRUE, 5, 4.9, FALSE)
## building a list
my_list <- list(clothes = c("hat", "scarf"), one_number = 6.5)
my_list
## building a data frame
my_df <- data.frame(fruits = c("apple", "orange", "pear"),
tastyness = c(8, 7, 4))
my_df
my_df
## building a data frame
my_df <- data.frame(fruits = c("apple", "orange", "pear"),
tastyness = c(8, 7, 4,9))
my_df
## demonstrating the use of 'class()'
class(my_num_vec)
class(my_list)
class(my_df)
## store together the name of a zoo, its animals, and its profit
## Exercise 11 ##
## I would use a list
## Exercise 12 ##
my_animal_list <- list(animal = c(pig), characteristics('fatty', 'pink', 'smart'))
my_animal_list <- list(animal = c('pig'), characteristics('fatty', 'pink', 'smart'))
my_animal_list <- list(animal = c("pig"), characteristics = 'fat', 'pink','smart')
my_animal_list
my_animal_list <- list(animal = c("pig"), characteristics = 'fat', 'pink','smart',)
my_animal_list <- list(animal = c("pig"), characteristics = 'fat', 'pink','smart')
## Exercise 11 ##
## my_animal_df <- data.frame(zoo = c('Cincinatti', 'Utrecht', 'Taipei', 'Tokyo'),
animals = c(50,20,30,90),
profit = c(1000000,20000000,500000,10000000)
)
## my_animal_df <- data.frame(zoo = c('Cincinatti', 'Utrecht', 'Taipei', 'Tokyo'),
animals = c(50,20,30,90),
profit = c(1000000,20000000,500000,10000000))
## my_animal_df <- data.frame(zoo = c('Cincinatti', 'Utrecht', 'Taipei', 'Tokyo'),
animals = c(50,20,30,90)
profit = c(1000000,20000000,500000,10000000)
)
## my_animal_df <- data.frame(zoo = c('Cincinatti', 'Utrecht', 'Taipei', 'Tokyo'),
animals = c(50,20,30,90),
profit = c(1000000,20000000,500000,10000000))
## my_animal_df <- data.frame(zoo = c('Cincinatti', 'Utrecht', 'Taipei', 'Tokyo')
animals = c(50,20,30,90)
profit = c(1000000,20000000,500000,10000000))
## my_animal_df <- data.frame(zoo = c('Cincinatti', 'Utrecht', 'Taipei', 'Tokyo')
animals = c(50,20,30,90)
profit = c(1000000,20000000,500000,10000000)
my_animal_df
## my_animal_df <- data.frame(zoo = c('Cincinatti', 'Utrecht', 'Taipei', 'Tokyo')
animals = c(50,20,30,90)
profit = c(1000000,20000000,500000,10000000)
my_animal_df <- data.frame(zoo = c('Cincinatti', 'Utrecht', 'Taipei', 'Tokyo')
animals = c(50,20,30,90)
profit = c(1000000,20000000,500000,10000000)
my_animal_df <- data.frame(zoo = c('Cincinatti', 'Utrecht', 'Taipei', 'Tokyo'),
animals = c(50,20,30,90),
profit = c(1000000,20000000,500000,10000000)
my_animal_df
my_animal_df <- data.frame(zoo = c('Cincinatti', 'Utrecht', 'Taipei', 'Tokyo'),
animals = c(50,20,30,90),
profit = c(1000000,20000000,500000,10000000))
my_animal_df
animal_characteristics_df <- data.frame(animal = c('Monkey', 'Panda', 'Pig', 'Giraffe'),
population = c(10, 3, 100, 20),
u_weight = c(10,80,80,200),
feed_cost = c(10,1000,10,50))
animal_characteristics_df
## demonstrating the subsetting of vectors
my_char_vec
my_char_vec[1]
my_num_vec
my_num_vec[c(1, 2)]
my_logic_vec
my_logic_vec[c(1, 3)]
my_char_vec[-1]
my_char_vec[-2]
my_char_vec[-5]
my_char_vec[-3]
my_char_vec[-2]
my_char_vec[-4]
my_char_vec[4]
## a single set of square brackets returns a sublist
my_list[1] ## in this case, a sublist of just one item (a vector)
is.list(my_list[1])
## double square brackets returns the element itself
my_list[[1]] ## in this case, a vector containing 3 strings
is.list(my_list[[1]])
## subsetting data frames
my_df[2]
is.data.frame(my_df[2])
my_df[[2]]
is.data.frame(my_df[[2]])
## subsetting a data frame with [] and the name of a column
my_df["tastyness"]
## subsetting a list with [] and the name of an item
my_list["one_number"]
## returning the item in row 2, column 2
my_df
my_df[2, 2]
## subsetting a data frame using the $ notation
my_df$tastyness
## subsetting a list using the $ notation
my_list$clothes
## adding a new item to my_list
my_list[[3]] <- "a new item"
## replacing the first item of 'clothes' with an new item
my_list$clothes[1] <- "trousers"
my_list
## adding a new column to the data frame 'my_df'
my_df$healthyness <- c(9, 9, 9)
my_df
## creating a new list with two items
my_new_list <- list(colors = c("red", "blue"), shapes = c("square", "circle"))
## removing a list item by setting it to NULL
my_new_list$shapes <- NULL
my_new_list
my_df
## Exercise 15 ##
my_df[2,1] <- 3
my_df[2,1]
my_df$tastyness[2] <- 7
my_df
my_df$tastyness[2] <- 9
my_df[[2,1]] <- 9
my_df[[2]] <- 9
my_df
my_df[[2]] <- 8
my_df[[2]] <- 9
my_df[[2]] <- 8
my_df
my_df[[2,2]] <- 8
my_df
my_df[[2,2]] <- 5
my_df
my_df
my_df$juicyness <- c(10,10,10)
my_df
## why doesn't this work?
round(my_list[2])
my_list
my_list[2]
## why doesn't this work?
round(my_list[[2]])
## printing my_df
my_df
## subsetting the first column of my_df
my_df[ , 1]
my_df$fruits <- ('apple','strawberry','pear')
my_df$fruits <- c('apple','strawberry','pear')
my_df
## printing my_df
my_df
## subsetting the first column of my_df
my_df[ , 1]
?my_df
?my_d
?levels
?data.frame
## avoiding factor conversion when creating a data frame
my_new_df <- data.frame(artefacts = c("mask", "tablet", "urn"),
stringsAsFactors = FALSE)
## now the 'artefacts' column is just characters
my_new_df$artefacts
## avoiding factor conversion when creating a data frame
my_new_df <- data.frame(artefacts = c("mask", "tablet", "urn"),
stringsAsFactors = TRUE)
## now the 'artefacts' column is just characters
my_new_df$artefacts
## avoiding factor conversion when creating a data frame
my_new_df <- data.frame(artefacts = c("mask", "tablet", "urn"),
stringsAsFactors = FALSE)
## now the 'artefacts' column is just characters
my_new_df$artefacts
## trying to change the first item of `my_df$fruits` to "raspberry" - warning!
my_df$fruits[1] <- "raspberry"
## the first item of my_df is now NA!
my_df
my_df
## converting a factor back to character
my_df$fruits <- as.character(my_df$fruits)
## now changing a value works!
my_df$fruits[1] <- "raspberry"
my_df
## trying to change the first item of `my_df$fruits` to "raspberry" - warning!
my_df$fruits[1] <- "fruitcake"
my_df
## illustrating that R stores even single numbers as vectors
secretly_a_vector <- 5
is.vector(secretly_a_vector)
secretly_a_vector[1]
## illustrating how R's operators are vectorised
my_num_1 <- c(1, 1, 1)
my_num_2 <- c(1, 3, 5)
## adding vectors together
my_num_1 + my_num_2
## comparing vector values
my_num_2 > my_num_1
## illustrating how R adds up vectors that aren't of equal length
my_num_1 + 8
my_num_2 + c(1, 6)
## illustrating how many of R's functions are vectorised
log(my_num_1)
substr(c("dog", "reindeer", "mite"), start = 1, stop = 2)
sum(my_num_2)
## fix this piece of code
mean_of_items <- mean(4, 5, 6)
mean_of_items
## fix this piece of code
mean_of_items <- m(4, 5, 6)
mean_of_items
## fix this piece of code
mean_of_items <- (4, 5, 6)
mean_of_items
## fix this piece of code
mean_of_items <- c(4, 5, 6)
mean_of_items
m(mean_of_items)
mean(mean_of_items)
mean(4,5,6)
sd(4,5,6)
?sd
?mean
my_df
my_df$juicyness <- NULL
my_df
my_df$goodness <- c(mean(tastyness + healthyness))
my_df$goodness <- c(tastyness + healthyness)
my_df$goodness <- c(fruits$tastyness + fruits$healthyness)
my_df$goodness <- c(my_df$tastyness + my_df$healthyness)
my_df
my_df$goodness <- c( mean( my_df$tastyness + my_df$healthyness) )
my_df
my_df$goodness <- c(my_df$tastyness + my_df$healthyness)
my_df$goodness <- c(mean(goodness))
my_df$goodness <- c(mean(my_df$goodness))
my_df
my_df$goodness <- c( ( mean(my_df$tastyness + my_df$healthyness)) )
my_df
my_df$goodness <- c( (my_df$tastyness + my_df$healthyness) / 2 )
my_df
## add mix_vec_1 and mix_vec_2 together
mix_vec_1 <- c("apple", 1.6, TRUE)
mix_vec_2 <- c(5, 4.9, FALSE)
mix_vec_3 <- mix_vec_1 + mix_vec_2
## why is this vector different?
all_at_once_vec <- c("apple", 1.6, TRUE, 5, 4.9, FALSE)
mix_vec_3
animal_characteristics_df <- data.frame(animal = c('Monkey', 'Panda', 'Pig', 'Giraffe'),
+                                         population = c(10, 3, 100, 20),
+                                         u_weight = c(10,80,80,200),
+                                         feed_cost = c(10,1000,10,50))
animal_characteristics_df <- data.frame(animal = c('Monkey', 'Panda', 'Pig', 'Giraffe'),
population = c(10, 3, 100, 20),
u_weight = c(10,80,80,200),
feed_cost = c(10,1000,10,50))
last_exercise <- data.frame(numbers = c(1,2,3,4,5,6),
randomNums = c(runif(n = 6, min = 0, max = 10)),
thirdColumn = c(last_exercise$numbers * last_exercise * randomNums),
)
last_exercise <- data.frame(numbers = c(1,2,3,4,5,6),
randomNums = c( runif(n = 6, min = 0, max = 10) ),
thirdColumn = c(last_exercise$numbers * last_exercise * randomNums),
)
last_exercise <- data.frame(numbers = c(1,2,3,4,5,6),
randomNums = c( runif(n = 6, min = 0, max = 10) ),
)
last_exercise <- data.frame(numbers = c(1,2,3,4,5,6))
last_exercise[1]
last_exercise[0]
last_exercise[2] <- c( runif(n = 6, min = 0, max = 10) )
last_exercise
last_exercise[3] <- c( last_exercise$numbers * last_exercise$V2 )
last_exercise[4] <- c( last_exercise$numbers[1,3] + last_exercise$V2[1,3] )
last_exercise[4] <- c( last_exercise$numbers[1] + last_exercise$V2[1] )
last_exercise
last_exercise$V4 <- NULL
last_exercise
last_exercise$V2[1,3]
last_exercise$V2[1]
last_exercise$V2[2]
last_exercise$V2[2.3]
last_exercise$V2[2,3]
last_exercise$V2[2,3]
my_num_vec
my_num_vec[c(1, 2)]
last_exercise$V2c[1,3]
last_exercise$V2c[1,2]
last_exercise$V2[1,3]
last_exercise$V2[1]
last_exercise$V2[1,2]
last_exercise$V2?[]
last_exercise$V2?[1,3]
last_exercise$V2c[1,3]
last_exercise$V2c[1,2]
my_logic_vec
my_logic_vec[c(1, 3)]
last_exercise[c(1,3)]
last_exercise[c(1,1,3)]
last_exercise[c(1,1,1)]
last_exercise[c(1)]
last_exercise[c(1,1)]
last_exercise[c(1)]
last_exercise$V2[c(1)]
last_exercise$V2[c(1,3)]
last_exercise$V2[c(1,4)]
last_exercise$V2[c(1,2,3)]
last_exercise$[4] <- c(last_exercise$V2[c(1,2,3)], last_exercise$V3[c(1,2,3)])
last_exercise$[4] <- c(last_exercise$V2[c(1,2,3)] last_exercise$V3[c(1,2,3)])
last_exercise$[4] <- c ( last_exercise$V2[c(1,2,3)] last_exercise$V3[c(1,2,3)] )
last_exercise$V2[c(1,2,3)]
last_exercise$[4] <- c ( last_exercise$V2[c(1,2,3)] + last_exercise$V3[c(1,2,3)] )
last_exercise$[4] <- c ( (last_exercise$V2[c(1,2,3)]) + (last_exercise$V3[c(1,2,3)]) )
last_exercise[4] <- c ( (last_exercise$V2[c(1,2,3)]) (last_exercise$V3[c(1,2,3)]) )
last_exercise[4] <- c ( (last_exercise$V2[c(1,2,3)]) + (last_exercise$V3[c(1,2,3)]) )
last_exercise
last_exercise[4] <- c ( (last_exercise$V2[c(1,2,3)]) , (last_exercise$V3[c(1,2,3)]) )
last_exercise
my_num_2 > my_num_1
last_exercise[5] <- c( last_exercise$V2 > last_exercise$numbers )
last_exercise[6] <- c( '0_name', '1_name', '2_name', '3_name', '4_name', '5_name' )
last_exercise
library("dplyr")
library("ggplot2")
library("ggplot2")
library("ggplot2")
detach("package:ggplot2", unload=TRUE)
library("ggplot2", lib.loc="/Library/Frameworks/R.framework/Versions/3.4/Resources/library")
install.packages(c("MASS", "Rcpp", "RcppRoll", "data.table", "dplyr", "openxlsx", "packrat", "pillar", "psych", "quantreg", "rlang", "rockchalk", "sp", "stringi", "stringr", "utf8", "yaml"))
list.files()
setwd('Documents/GitHub/R-Group-Assignment/')
list.files()
library(ggplot2)
library(tidyr)
library(dplyr)
shootings <- read.csv('cleaned_shootings', stringsAsFactors = FALSE)
shootings$Gender[shootings$Gender == "Unknown"] <- NA
shootings <- na.omit(shootings)
shootings$Gender[shootings$Gender == 'Male/Female'] <- NA
shootings <- na.omit(shootings)
shootings$Race[shootings$Race == 'Unknown'] <- NA
shootings <- na.omit(shootings)
chi_square_results <- chisq.test(x = shootings$Gender, y = shootings$Race)
chi_square_results
shootings$Gender <- factor(shootings$Gender)
shootings <- shootings %>%
mutate(Gender = relevel(Gender, ref = "Male"))
summary(lm(Total_Victims ~ Gender, data = shootings))
shootings$Race <- factor(shootings$Race)
shootings <- shootings %>%
mutate(Race = relevel(Race, ref = "White"))
summary(lm(Total_Victims ~ Race, data = shootings))
